---
// src/components/TableOfContents.astro
interface TocItem { id: string; text: string; level: 'h2'|'h3' }
const { items = [] } = Astro.props as { items: TocItem[] }
---
{items.length > 0 && (
  <nav class="toc" aria-label="On this page">
    {/* Mobile */}
    <details class="lg:hidden surface-soft rounded-xl p-3">
      <summary class="cursor-pointer font-semibold">On this page</summary>
      <ul class="mt-2 space-y-1 text-[13px] leading-5">
        {items.map(i => (
          <li class={`toc-item ${i.level === 'h3' ? 'pl-3' : ''}`}>
            <a href={`#${i.id}`} class="toc-link" data-toc-link={i.id}>{i.text}</a>
          </li>
        ))}
      </ul>
    </details>

    {/* Desktop */}
    <div class="hidden lg:block sticky top-20">
      <div class="surface-soft rounded-2xl p-4">
        <div class="text-sm font-semibold mb-2" style="color: rgba(255,255,255,.75)">On this page</div>
        <div class="toc-scroll">
          <ul class="space-y-1 text-sm leading-5">
            {items.map(i => (
              <li class={`toc-item ${i.level === 'h3' ? 'pl-3' : ''}`}>
                <a href={`#${i.id}`} class="toc-link" data-toc-link={i.id}>{i.text}</a>
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </nav>
)}

<script is:inline>
  (() => {
    const root = document.currentScript?.closest('.toc');
    if (!root) return;

    const scrollBox = root.querySelector('.toc-scroll');
    const links = Array.from(root.querySelectorAll('a[data-toc-link]'));
    if (!links.length) return;

    const ids = links.map(a => a.getAttribute('data-toc-link')!);
    const heads = ids
      .map(id => document.getElementById(id))
      .filter(Boolean);

    // Offset so we account for sticky header + some breathing room
    const OFFSET = 120;

    let positions = [];
    function measure() {
      positions = heads.map(h => ({
        id: h.id,
        top: Math.floor(h.getBoundingClientRect().top + window.scrollY)
      })).sort((a,b) => a.top - b.top);
    }
    function activate(id) {
      links.forEach(a => {
        const is = a.getAttribute('data-toc-link') === id;
        a.classList.toggle('active', is);
        a.setAttribute('aria-current', is ? 'true' : 'false');
        const li = a.closest('.toc-item');
        if (li) li.classList.toggle('active', is);
      });
      const activeLink = root.querySelector(`[data-toc-link="${id}"]`);
      if (activeLink && scrollBox) activeLink.scrollIntoView({ block: 'nearest' });
    }
    function onScroll() {
      const y = window.scrollY + OFFSET;
      let current = positions[0]?.id;
      for (const p of positions) {
        if (p.top <= y) current = p.id;
        else break;
      }
      if (current) activate(current);
    }

    // Init
    measure();
    onScroll();
    window.addEventListener('scroll', onScroll, { passive: true });
    window.addEventListener('resize', () => { measure(); onScroll(); });

    // Click = immediate active + close mobile panel
    root.addEventListener('click', (e) => {
      const a = (e.target as HTMLElement).closest('a[data-toc-link]');
      if (!a) return;
      activate(a.getAttribute('data-toc-link')!);
      const d = root.querySelector('details');
      if (d && (d as HTMLDetailsElement).open) (d as HTMLDetailsElement).open = false;
    }, true);
  })();
</script>

<style>
  .toc .toc-scroll {
    max-height: calc(100vh - 10rem);
    overflow: auto;
    padding-right: .25rem;
  }

  .toc .toc-item { position: relative; }
  .toc .toc-item.active::before {
    content: '';
    position: absolute;
    left: -8px; top: 0; bottom: 0;
    width: 2px;
    background: #b07aff;
    border-radius: 2px;
    opacity: .9;
  }

  .toc .toc-link {
    display: block;
    text-decoration: none;
    color: rgba(255,255,255,.85);
    transition: color .15s ease, opacity .15s ease;
    padding: .25rem .25rem .25rem 0;
  }
  .toc .toc-link:hover {
    color: #b07aff;     /* hover color restored */
    opacity: 1;
    text-decoration: underline;
  }
  .toc .toc-link.active {
    color: #b07aff;     /* active text color */
    opacity: 1;
    font-weight: 600;
  }
</style>
